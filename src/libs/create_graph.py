import pandas as pd
import matplotlib.cm as cm
import matplotlib.colors
from pyvis.network import Network

def add_dic_node(dic, id, use, value):
    dic['element'].append('node')
    dic['id_1'].append(id)
    dic['id_2'].append('NA')
    dic['use'].append(use)
    dic['value'].append(value)	

def create_graph(df, filename=None,
					 out='untitled.html',
					 not_directed=False, 
					 size_height='600px', 
					 size_width='800px', 
					 colormap='tab20',
					 nodesize=5,
					 nodeshape='dot',
					 edgewidth=10,
					 no_node_labels=False,
					 show_buttons=False,
					 physics=False,
					 stabilization=False):
	nodes = {}
	edges = {}
	new_nodes = 0
	new_edges = 0
	cmap = cm.get_cmap(colormap)

	for index, row in df.iterrows():

		# Handle the colours if they appear:
		if row['use'] == 'color_float':
			row['use'] = 'color'
			cval = float(row['value'])
			if cval > 1:
				print('WARNING: Got colormap value that is over 1 (', 
					   cval, '), clipped')
				cval = 1
			row['value'] =  matplotlib.colors.to_hex(cmap(cval))
		
		# Make y coordinate go upwards if it appears:
		if row['use'] == 'y':
			row['value'] =  -1*float(row['value'])

		if row['element'].lower() == 'node':
			if not row['id_1'] in nodes.keys():
				nodes[row['id_1']] = {'size' : nodesize, 'shape' : nodeshape}
				if not no_node_labels:
					nodes[row['id_1']]['label'] = str(row['id_1'])
				new_nodes += 1

			if row['use'] == 'text':
				if 'title' in nodes[row['id_1']].keys():
					nodes[row['id_1']]['title'] += '\n' + str(row['value'])
				else:
					nodes[row['id_1']]['title'] = str(row['value'])
			else:
				nodes[row['id_1']][row['use']] = row['value']

		elif row['element'].lower() == 'edge':
			n1 = row['id_1']
			n2 = row['id_2']
			edge_id = (n1, n2)
			if not edge_id in edges.keys():
				edges[edge_id] = {'width' : edgewidth}
				new_edges += 1
				# Check whether the nodes exist or not:
				for nn in [n1, n2]:
					if nn not in nodes.keys():
						nodes[nn] = {'title' : 'Generated by edge ' + str(edge_id), 
									 'size' : nodesize,
									 'shape' : nodeshape}
						if not no_node_labels:
							nodes[nn]['label'] = str(nn)
						new_nodes += 1


			if row['use'] == 'text':
				if 'title' in edges[edge_id].keys():
					edges[edge_id]['title'] += '\n' + str(row['value'])
				else:
					edges[edge_id]['title'] = str(row['value'])
			else:
				edges[edge_id][row['use']] = row['value']		
		else:
			print('Unknown element type "', row['element'], '", ignored.')

	print('Processed input info, ', new_nodes, ' nodes and', new_edges, 'edges were found.')

	# Create the graph file:
	g = Network(size_height, size_width, directed=not not_directed)

	for n in nodes.keys():
		g.add_node(n, **nodes[n])

	for e in edges.keys():
		g.add_edge(e[0], e[1], **edges[e])



	g.toggle_physics(physics)
	g.toggle_stabilization(stabilization)

	print('Saving graph to', out, '...')
	if show_buttons:
		g.show_buttons()
	g.show(out)

	print('Done.')

if __name__ == '__main__':

	import argparse

	parser = argparse.ArgumentParser(description='Create vis.js based HTML graphs from a CSV file specifying node and edge properties.')
	parser.add_argument('filename', metavar='INPUT',
						type=str, help='.CSV file to parse')
	
	parser.add_argument("--out", metavar='OUTPUT',
						type=str, help=".HTML file to save the output")
	parser.add_argument("--edgewidth", metavar='EW',
						type=float, help="Default edge width")
	parser.add_argument("--nodesize", metavar='NSi',
						type=float, help="Default node size")
	parser.add_argument("--nodeshape", metavar='NSh',
						type=str, help="Default node shape (from vis.js)")
	parser.add_argument("--colormap", metavar='CMAP',
						type=str, help="Colormap to use (from matplotlib)")
	parser.add_argument("--size_height", metavar='H',
						type=str, help="Height of the displayed canvas, eg. '800px'")
	parser.add_argument("--size_width", metavar='W',
						type=str, help="Width of the displayed canvas, eg. '800px'")

	parser.add_argument("--show_buttons", action='store_true', help="Show vis.js control panel on html file (default False)")
	parser.add_argument("--no_node_labels", action='store_true', help="Do not display node labels in the graph")
	parser.add_argument("--not_directed", action='store_true', help="Do not consider the graph as directed")

	parser.add_argument("--physics", action='store_true', help="Perform physics simulation (default False)")
	parser.add_argument("--stabilization", action='store_true', help="Perform node stabilization nodes (default False)")

	# Parse arguments, and do not pass those left empty:
	args = parser.parse_args()
	collected_args = vars(args)
	dkeys = list(collected_args.keys())
	for k in dkeys:
		if collected_args[k] == None:
			collected_args.pop(k, None)

	# Read the file provided
	df = pd.read_csv(args.filename)

	# Create the graph
	create_graph(df, **vars(args))